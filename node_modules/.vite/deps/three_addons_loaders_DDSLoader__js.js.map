{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/DDSLoader.js"],
  "sourcesContent": ["import {\r\n\tCompressedTextureLoader,\r\n\tRGBAFormat,\r\n\tRGBA_S3TC_DXT3_Format,\r\n\tRGBA_S3TC_DXT5_Format,\r\n\tRGB_ETC1_Format,\r\n\tRGB_S3TC_DXT1_Format\r\n} from 'three';\r\n\r\nclass DDSLoader extends CompressedTextureLoader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tparse( buffer, loadMipmaps ) {\r\n\r\n\t\tconst dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\r\n\r\n\t\t// Adapted from @toji's DDS utils\r\n\t\t// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\r\n\r\n\t\t// All values and structures referenced from:\r\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n\r\n\t\tconst DDS_MAGIC = 0x20534444;\r\n\r\n\t\t// const DDSD_CAPS = 0x1;\r\n\t\t// const DDSD_HEIGHT = 0x2;\r\n\t\t// const DDSD_WIDTH = 0x4;\r\n\t\t// const DDSD_PITCH = 0x8;\r\n\t\t// const DDSD_PIXELFORMAT = 0x1000;\r\n\t\tconst DDSD_MIPMAPCOUNT = 0x20000;\r\n\t\t// const DDSD_LINEARSIZE = 0x80000;\r\n\t\t// const DDSD_DEPTH = 0x800000;\r\n\r\n\t\t// const DDSCAPS_COMPLEX = 0x8;\r\n\t\t// const DDSCAPS_MIPMAP = 0x400000;\r\n\t\t// const DDSCAPS_TEXTURE = 0x1000;\r\n\r\n\t\tconst DDSCAPS2_CUBEMAP = 0x200;\r\n\t\tconst DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\r\n\t\tconst DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\r\n\t\tconst DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\r\n\t\tconst DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\r\n\t\tconst DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\r\n\t\tconst DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\r\n\t\t// const DDSCAPS2_VOLUME = 0x200000;\r\n\r\n\t\t// const DDPF_ALPHAPIXELS = 0x1;\r\n\t\t// const DDPF_ALPHA = 0x2;\r\n\t\t// const DDPF_FOURCC = 0x4;\r\n\t\t// const DDPF_RGB = 0x40;\r\n\t\t// const DDPF_YUV = 0x200;\r\n\t\t// const DDPF_LUMINANCE = 0x20000;\r\n\r\n\t\tfunction fourCCToInt32( value ) {\r\n\r\n\t\t\treturn value.charCodeAt( 0 ) +\r\n\t\t\t\t( value.charCodeAt( 1 ) << 8 ) +\r\n\t\t\t\t( value.charCodeAt( 2 ) << 16 ) +\r\n\t\t\t\t( value.charCodeAt( 3 ) << 24 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction int32ToFourCC( value ) {\r\n\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\tvalue & 0xff,\r\n\t\t\t\t( value >> 8 ) & 0xff,\r\n\t\t\t\t( value >> 16 ) & 0xff,\r\n\t\t\t\t( value >> 24 ) & 0xff\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadARGBMip( buffer, dataOffset, width, height ) {\r\n\r\n\t\t\tconst dataLength = width * height * 4;\r\n\t\t\tconst srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\r\n\t\t\tconst byteArray = new Uint8Array( dataLength );\r\n\t\t\tlet dst = 0;\r\n\t\t\tlet src = 0;\r\n\t\t\tfor ( let y = 0; y < height; y ++ ) {\r\n\r\n\t\t\t\tfor ( let x = 0; x < width; x ++ ) {\r\n\r\n\t\t\t\t\tconst b = srcBuffer[ src ]; src ++;\r\n\t\t\t\t\tconst g = srcBuffer[ src ]; src ++;\r\n\t\t\t\t\tconst r = srcBuffer[ src ]; src ++;\r\n\t\t\t\t\tconst a = srcBuffer[ src ]; src ++;\r\n\t\t\t\t\tbyteArray[ dst ] = r; dst ++;\t//r\r\n\t\t\t\t\tbyteArray[ dst ] = g; dst ++;\t//g\r\n\t\t\t\t\tbyteArray[ dst ] = b; dst ++;\t//b\r\n\t\t\t\t\tbyteArray[ dst ] = a; dst ++;\t//a\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn byteArray;\r\n\r\n\t\t}\r\n\r\n\t\tconst FOURCC_DXT1 = fourCCToInt32( 'DXT1' );\r\n\t\tconst FOURCC_DXT3 = fourCCToInt32( 'DXT3' );\r\n\t\tconst FOURCC_DXT5 = fourCCToInt32( 'DXT5' );\r\n\t\tconst FOURCC_ETC1 = fourCCToInt32( 'ETC1' );\r\n\r\n\t\tconst headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n\t\t// Offsets into the header array\r\n\r\n\t\tconst off_magic = 0;\r\n\r\n\t\tconst off_size = 1;\r\n\t\tconst off_flags = 2;\r\n\t\tconst off_height = 3;\r\n\t\tconst off_width = 4;\r\n\r\n\t\tconst off_mipmapCount = 7;\r\n\r\n\t\t// const off_pfFlags = 20;\r\n\t\tconst off_pfFourCC = 21;\r\n\t\tconst off_RGBBitCount = 22;\r\n\t\tconst off_RBitMask = 23;\r\n\t\tconst off_GBitMask = 24;\r\n\t\tconst off_BBitMask = 25;\r\n\t\tconst off_ABitMask = 26;\r\n\r\n\t\t// const off_caps = 27;\r\n\t\tconst off_caps2 = 28;\r\n\t\t// const off_caps3 = 29;\r\n\t\t// const off_caps4 = 30;\r\n\r\n\t\t// Parse header\r\n\r\n\t\tconst header = new Int32Array( buffer, 0, headerLengthInt );\r\n\r\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\r\n\r\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tlet blockBytes;\r\n\r\n\t\tconst fourCC = header[ off_pfFourCC ];\r\n\r\n\t\tlet isRGBAUncompressed = false;\r\n\r\n\t\tswitch ( fourCC ) {\r\n\r\n\t\t\tcase FOURCC_DXT1:\r\n\r\n\t\t\t\tblockBytes = 8;\r\n\t\t\t\tdds.format = RGB_S3TC_DXT1_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT3:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = RGBA_S3TC_DXT3_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT5:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = RGBA_S3TC_DXT5_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_ETC1:\r\n\r\n\t\t\t\tblockBytes = 8;\r\n\t\t\t\tdds.format = RGB_ETC1_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tif ( header[ off_RGBBitCount ] === 32\r\n\t\t\t\t\t&& header[ off_RBitMask ] & 0xff0000\r\n\t\t\t\t\t&& header[ off_GBitMask ] & 0xff00\r\n\t\t\t\t\t&& header[ off_BBitMask ] & 0xff\r\n\t\t\t\t\t&& header[ off_ABitMask ] & 0xff000000 ) {\r\n\r\n\t\t\t\t\tisRGBAUncompressed = true;\r\n\t\t\t\t\tblockBytes = 64;\r\n\t\t\t\t\tdds.format = RGBAFormat;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );\r\n\t\t\t\t\treturn dds;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdds.mipmapCount = 1;\r\n\r\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\r\n\r\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\r\n\r\n\t\t}\r\n\r\n\t\tconst caps2 = header[ off_caps2 ];\r\n\t\tdds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\r\n\t\tif ( dds.isCubemap && (\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||\r\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )\r\n\t\t) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tdds.width = header[ off_width ];\r\n\t\tdds.height = header[ off_height ];\r\n\r\n\t\tlet dataOffset = header[ off_size ] + 4;\r\n\r\n\t\t// Extract mipmaps buffers\r\n\r\n\t\tconst faces = dds.isCubemap ? 6 : 1;\r\n\r\n\t\tfor ( let face = 0; face < faces; face ++ ) {\r\n\r\n\t\t\tlet width = dds.width;\r\n\t\t\tlet height = dds.height;\r\n\r\n\t\t\tfor ( let i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\tlet byteArray, dataLength;\r\n\r\n\t\t\t\tif ( isRGBAUncompressed ) {\r\n\r\n\t\t\t\t\tbyteArray = loadARGBMip( buffer, dataOffset, width, height );\r\n\t\t\t\t\tdataLength = byteArray.length;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\r\n\t\t\t\t\tbyteArray = new Uint8Array( buffer, dataOffset, dataLength );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mipmap = { 'data': byteArray, 'width': width, 'height': height };\r\n\t\t\t\tdds.mipmaps.push( mipmap );\r\n\r\n\t\t\t\tdataOffset += dataLength;\r\n\r\n\t\t\t\twidth = Math.max( width >> 1, 1 );\r\n\t\t\t\theight = Math.max( height >> 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn dds;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DDSLoader };\r\n"],
  "mappings": "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",
  "names": ["buffer", "dataOffset"]
}
